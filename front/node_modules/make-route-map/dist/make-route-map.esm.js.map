{"version":3,"file":"make-route-map.esm.js","sources":["../src/index.ts"],"sourcesContent":["export type RoutesType = {\n  [name: string]: {\n    path: string;\n    // Params contained in this path's URL\n    params?: {\n      [paramName: string]: true;\n    };\n    search?: {\n      // Is this field required or not?\n      [paramName: string]: boolean;\n    };\n  };\n};\n\nexport type RoutesReturn<R extends RoutesType> = {\n  [K in keyof R]: (params?: {\n    params?: { [PK in keyof R[K]['params']]: string | number };\n    search?: { [PK in keyof R[K]['search']]?: string | number };\n  }) => string;\n};\n\nexport type UseNavigateReturn<R extends RoutesType> = {\n  [K in keyof RoutesReturn<R>]: (\n    params?: Parameters<RoutesReturn<R>[K]>[0]\n  ) => void;\n};\n\nexport interface MakeRouteMapOptions {\n  /**\n   * By default, we match path parameters using the `:id` pattern.\n   * You can change this by passing an alternative regex from\n   * the result of this function.\n   */\n  paramMatcher?: (paramName: string) => RegExp;\n}\n\n/**\n * Use this function to create a single source of truth\n * for all routes in your app\n */\nexport const makeRouteMap = <R extends RoutesType>(\n  routes: R,\n  options?: MakeRouteMapOptions\n): RoutesReturn<R> => {\n  let obj: Partial<RoutesReturn<R>> = {};\n  Object.entries(routes).forEach(([_key, { path }]) => {\n    const key: keyof R = _key;\n\n    const func: RoutesReturn<R>[typeof key] = (routeInfo?: {\n      params?: {\n        [paramName: string]: string | number;\n      };\n      search?: {\n        [paramName: string]: string | number | undefined;\n      };\n    }) => {\n      let newPath = String(path);\n      // If params, add the new path to the object\n      if (routeInfo?.params) {\n        Object.entries(routeInfo.params).forEach(([paramName, value]) => {\n          newPath = newPath.replace(\n            options?.paramMatcher?.(paramName) || new RegExp(':' + paramName),\n            String(value)\n          );\n        });\n      }\n      if (!routeInfo?.search) {\n        return newPath;\n      } else {\n        return `${newPath}?${new URLSearchParams(\n          routeInfo.search as any\n        ).toString()}`;\n      }\n    };\n\n    obj[key] = func;\n  });\n  return obj as RoutesReturn<R>;\n};\n\n/**\n * Creates a navigate function which you can use to\n * navigate type-safely between all routes in your app\n */\nexport const makeNavigate = <R extends RoutesType>(\n  routeMap: RoutesReturn<R>,\n  goToRoute: (route: string) => void\n): UseNavigateReturn<R> => {\n  const toReturn: Partial<UseNavigateReturn<R>> = {};\n  Object.keys(routeMap).forEach(_routeName => {\n    const routeName: keyof UseNavigateReturn<R> = _routeName;\n    toReturn[routeName] = (params: any) => {\n      goToRoute(routeMap[routeName](params));\n    };\n  });\n  return toReturn as UseNavigateReturn<R>;\n};\n\nexport default makeRouteMap;\n"],"names":["makeRouteMap","routes","options","obj","Object","entries","forEach","_key","path","key","func","routeInfo","newPath","String","params","paramName","value","replace","paramMatcher","RegExp","search","URLSearchParams","toString","makeNavigate","routeMap","goToRoute","toReturn","keys","_routeName","routeName"],"mappings":"AAoCA;;;;IAIaA,YAAY,GAAG,SAAfA,YAAe,CAC1BC,MAD0B,EAE1BC,OAF0B;AAI1B,MAAIC,GAAG,GAA6B,EAApC;AACAC,EAAAA,MAAM,CAACC,OAAP,CAAeJ,MAAf,EAAuBK,OAAvB,CAA+B;QAAEC;QAAQC,eAAAA;AACvC,QAAMC,GAAG,GAAYF,IAArB;;AAEA,QAAMG,IAAI,GAAgC,SAApCA,IAAoC,CAACC,SAAD;AAQxC,UAAIC,OAAO,GAAGC,MAAM,CAACL,IAAD,CAApB;;AAEA,UAAIG,SAAJ,aAAIA,SAAJ,uBAAIA,SAAS,CAAEG,MAAf,EAAuB;AACrBV,QAAAA,MAAM,CAACC,OAAP,CAAeM,SAAS,CAACG,MAAzB,EAAiCR,OAAjC,CAAyC;;;cAAES;cAAWC;AACpDJ,UAAAA,OAAO,GAAGA,OAAO,CAACK,OAAR,CACR,CAAAf,OAAO,SAAP,IAAAA,OAAO,WAAP,qCAAAA,OAAO,CAAEgB,YAAT,qFAAAhB,OAAO,EAAiBa,SAAjB,CAAP,KAAsC,IAAII,MAAJ,CAAW,MAAMJ,SAAjB,CAD9B,EAERF,MAAM,CAACG,KAAD,CAFE,CAAV;AAID,SALD;AAMD;;AACD,UAAI,EAACL,SAAD,aAACA,SAAD,uBAACA,SAAS,CAAES,MAAZ,CAAJ,EAAwB;AACtB,eAAOR,OAAP;AACD,OAFD,MAEO;AACL,eAAUA,OAAV,SAAqB,IAAIS,eAAJ,CACnBV,SAAS,CAACS,MADS,EAEnBE,QAFmB,EAArB;AAGD;AACF,KAzBD;;AA2BAnB,IAAAA,GAAG,CAACM,GAAD,CAAH,GAAWC,IAAX;AACD,GA/BD;AAgCA,SAAOP,GAAP;AACD;AAED;;;;;IAIaoB,YAAY,GAAG,SAAfA,YAAe,CAC1BC,QAD0B,EAE1BC,SAF0B;AAI1B,MAAMC,QAAQ,GAAkC,EAAhD;AACAtB,EAAAA,MAAM,CAACuB,IAAP,CAAYH,QAAZ,EAAsBlB,OAAtB,CAA8B,UAAAsB,UAAU;AACtC,QAAMC,SAAS,GAA+BD,UAA9C;;AACAF,IAAAA,QAAQ,CAACG,SAAD,CAAR,GAAsB,UAACf,MAAD;AACpBW,MAAAA,SAAS,CAACD,QAAQ,CAACK,SAAD,CAAR,CAAoBf,MAApB,CAAD,CAAT;AACD,KAFD;AAGD,GALD;AAMA,SAAOY,QAAP;AACD;;;;;"}