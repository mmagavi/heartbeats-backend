package edu.brown.cs32.examples.moshiExample.soup;

import edu.brown.cs32.examples.moshiExample.ingredients.Ingredient;

import java.util.*;

/**
 * A state container for this demo. In the soup-making story, this class is a pot of soup. The soup may not
 * be entirely finished (indeed, it's often tempting to add more things to a pot of soup). The effects of adding
 * new ingredients to the soup are implemented in the ingredients themselves.
 *
 * For the sake of this demo, we'll keep the soup state relatively simple.
 */
public class Soup {
    /**
     * Internal container for how much of each ingredient the soup contains right now.
     *
     * Note: making the field `final` only keeps us from overwriting the map itself, *not* its contents!
     *
     */
    final private Set<Ingredient> contents = new HashSet<>();
    final boolean timidChef;

    public Soup(boolean timidChef) {
        this.timidChef = timidChef;
    }

    public void stirIn(Ingredient ingredient) {
        contents.add(ingredient);
    }

    /**
     * Find the contents of this pot of soup. The object returned is an unmodifiable view:
     * it will be updated as the pot of soup changes, but doesn't allow modifications.
     * @return an immutable view of the contents of this pot of soup
     */
    public Set<Ingredient> ingredients() {
        return Collections.unmodifiableSet(contents);
    }

    /**
     * Is the chef timid? This may mean different things for adding different ingredients
     * @return timidity of chef
     */
    public boolean isTimidChef() {
        return timidChef;
    }

    /**
     * Static factory method to make testing easier. Produces a Soup based on parameters and ingredients.
     * Does *not* produce ActualFlavorExceptions, even if the chef is timid.
     * @param isTimidChef whether the chef is timid
     * @param ingredients the set of ingredients to try mixing together
     * @return the new Soup object
     */
    public static Soup buildNoExceptions(boolean isTimidChef, Collection<Ingredient> ingredients)  {
        Soup result = new Soup(isTimidChef);
        for(Ingredient i: ingredients)
            result.stirIn(i);
        return result;
    }

    @Override
    public String toString() {
        return "Soup with "+ingredients().toString()+" made by timid="+isTimidChef();
    }

    /**
     * auto-generated by IntelliJ Code -> generate
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Soup soup = (Soup) o;
        return timidChef == soup.timidChef && Objects.equals(contents, soup.contents);
    }

    /**
     * auto-generated by IntelliJ Code -> generate
     */
    @Override
    public int hashCode() {
        return Objects.hash(contents, timidChef);
    }

}

