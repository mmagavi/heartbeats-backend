/**
 * Use this function to create a single source of truth
 * for all routes in your app
 */
var makeRouteMap = function makeRouteMap(routes, options) {
  var obj = {};
  Object.entries(routes).forEach(function (_ref) {
    var _key = _ref[0],
        path = _ref[1].path;
    var key = _key;

    var func = function func(routeInfo) {
      var newPath = String(path); // If params, add the new path to the object

      if (routeInfo === null || routeInfo === void 0 ? void 0 : routeInfo.params) {
        Object.entries(routeInfo.params).forEach(function (_ref2) {
          var _options$paramMatcher;

          var paramName = _ref2[0],
              value = _ref2[1];
          newPath = newPath.replace((options === null || options === void 0 ? void 0 : (_options$paramMatcher = options.paramMatcher) === null || _options$paramMatcher === void 0 ? void 0 : _options$paramMatcher.call(options, paramName)) || new RegExp(':' + paramName), String(value));
        });
      }

      if (!(routeInfo === null || routeInfo === void 0 ? void 0 : routeInfo.search)) {
        return newPath;
      } else {
        return newPath + "?" + new URLSearchParams(routeInfo.search).toString();
      }
    };

    obj[key] = func;
  });
  return obj;
};
/**
 * Creates a navigate function which you can use to
 * navigate type-safely between all routes in your app
 */

var makeNavigate = function makeNavigate(routeMap, goToRoute) {
  var toReturn = {};
  Object.keys(routeMap).forEach(function (_routeName) {
    var routeName = _routeName;

    toReturn[routeName] = function (params) {
      goToRoute(routeMap[routeName](params));
    };
  });
  return toReturn;
};

export default makeRouteMap;
export { makeNavigate, makeRouteMap };
//# sourceMappingURL=make-route-map.esm.js.map
